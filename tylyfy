#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2014, Kacper Å»uk
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.  2. Redistributions in
# binary form must reproduce the above copyright notice, this list of
# conditions and the following disclaimer in the documentation and/or other
# materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import logging
import traceback
from Tylyfy.handler import Handler
from Tylyfy.colors import *
import spotify
import cmd
import sys, os


class Tylyfy(cmd.Cmd):
    doc_header = HEADING+'Available commands'+RESET
    prompt = RESET*len("tylyfy> ") # prevent deleting prompt

    def __init__(self):
        cmd.Cmd.__init__(self)
        self.handler = Handler()
        self.postcmd(False, '')

    def postcmd(self, stop, line):
        if not self.handler.player.playing or self.handler.player.current >= len(self.handler.player.playlist) or self.handler.player.current < 0:
            sys.stdout.write(PROMPT+"tylyfy> "+RESET)
            return stop
        t = self.handler.player.playlist[self.handler.player.current]
        ret = "\n%sNow playing:%s %s%s by%s %s%s (%s)\n"% (PLAYED, TRACK, t.name, SEPARATOR, ARTIST, t.album.artist.name, ALBUM, t.album.name)
        if not self.handler.player.random:
            ret += "%sTracks to the end of playlist: %d\n" % (TRACKS_TO_END, len(self.handler.player.playlist)-self.handler.player.current -1)
        ret += "%stylyfy>%s " % (PROMPT, RESET)
        sys.stdout.write(ret)
        return stop

    def do_help(self, line):
        """List available commands with "help" or detailed help with "help cmd"."""
        if line:
            cmd.Cmd.do_help(self, line)
        else:
            print(self.doc_header)
            print("%s" % str(self.ruler * len(self.doc_header)))

            names = self.get_names()
            names.sort()
            prevname = ''
            maxlen = 0
            for n in names:
                if maxlen < len(n):
                    maxlen = len(n)

            for name in names:
                if name[:3] == 'do_':
                    if name == prevname:
                        continue
                    prevname = name
                    cmdname = name[3:]
                    if getattr(self, name).__doc__:
                        doc = getattr(self, name).__doc__
                        print("%s - %s" % (cmdname.ljust(maxlen), doc.split('\n')[0]))
                    else:
                        print("%s" % (cmdname))

    def do_EOF(self, line):
        """exit """
        self.handler.quit()
        return True

    def emptyline(self):
        self.do_help("")

    def do_login(self, line):
        """login <username> <password> - password won't be stored, you only have to do this once"""
        username, password = line.split(' ')
        self.handler.login(username, password)

    def do_search(self, line):
        """search <type> <query> - search for <type>.
Type can be:
    artist
    playlist
    track
    album
If type isn't supplied it's assumed to be artist."""
        line = line.strip().split(' ')
        t = line[0]
        if t in ('artist', 'playlist', 'track', 'album'):
            query = ' '.join(line[1:])
        else:
            t = 'artist'
            query = ' '.join(line)
        if self.handler.search(t, query):
            self.handler.print_results()

    def do_more(self, line):
        """show more search results"""
        if self.handler.more():
            self.handler.print_results()

    def do_clear(self, q):
        """clear playlist"""
        self.handler.player.clear()

    def do_next(self, q):
        """skip to next song"""
        self.handler.player.next(force=True)

    def do_pause(self, q):
        """pause playback"""
        self.handler.player.pause()

    def do_resume(self, q):
        """resume playback"""
        self.handler.player.play()

    def do_play(self, query):
        """clear playlist and play object.
    play <spotify:track:song_id> - play song
    play <spotify:album:album_id> - play album
    play <spotify:artist:artist_id> - play all albums of an artist
    play <similar:spotify:artist:artist_id> - play all albums of similar artists
    play playlist <playlist_name> - play your playlists (allows only partial match on name)
    play <spotify:...:playlist:playlist_id> - play Spotify playlist
    play starred - play your starred songs
    play <search query> - play first 20 elements of a search query"""
        
        self.handler.player.clear()
        self.do_enqueue(query)
        self.handler.player.next()

    def do_current(self, query):
        """Show current playlist and track"""
        i = 1
        for track in self.handler.player.playlist:
            if (i-1) % 15 == 14:
                try:
                    r = raw_input("==== %d more results. Press enter to see them, or anything else and enter to skip ====\n" % (len(self.handler.player.playlist)-i+1))
                except NameError:
                    r = input("==== %d more results. Press enter to see them, or anything else and enter to skip ====\n" % (len(self.handler.player.playlist)-i+1))

                if r:
                    return
            if self.handler.player.current == i-1:
                print("%s ** %d. %s%s%s by%s %s %s(%s) %s(currently played)%s" % (PLAYED, i, TRACK, track.name, SEPARATOR, ARTIST, track.album.artist.name, ALBUM, track.album.name, PLAYED, RESET))
            else:
                print("%s%d. %s%s %sby%s %s%s (%s)%s" % (PLAYLIST, i, TRACK, track.name, SEPARATOR, ARTIST, track.album.artist.name, ALBUM, track.album.name, RESET))
            i += 1

    def do_repeat(self, query):
        """toggle looping through playlist (also please see help repeat)
repeat - toggle looping through playlist
repeat one - toggle looping current track"""
        if query == "one":
            self.handler.player.loop_one = not self.handler.player.loop_one
            if(self.handler.player.loop_one):
                print(INFO+"Repeat one: on"+RESET)
            else:
                print(INFO+"Repeat one: off"+RESET)
        else:
            self.handler.player.loop = not self.handler.player.loop
            if(self.handler.player.loop):
                print(INFO+"Repeat: on"+RESET)
            else:
                print(INFO+"Repeat: off"+RESET)

    def do_random(self, query):
        """toggle playing random songs"""
        self.handler.player.random = not self.handler.player.random
        if(self.handler.player.random):
            print(INFO+"Random: on"+RESET)
        else:
            print(INFO+"Random: off"+RESET)

    def do_jump(self, query):
        """jump <n> - jump to specific track on playlist"""
        self.handler.player.jump(int(query))

    def do_shell(self, query):
        """exec(query)"""
        try:
            exec(query)
        except Exception:
            traceback.print_exc()

    def do_star(self, query):
        """star current song
star unset - unstar current song"""
        if not query:
            self.handler.setStarred(True)
        else:
            self.handler.setStarred(False)

    def do_playlists(self, query):
        """show your playlists"""
        self.handler.showPlaylists()


    def do_enqueue(self, query):
        """add object to playlist (see 'help play' for possible objects)"""

        self.handler.enqueue(query)

Tylyfy().cmdloop()
